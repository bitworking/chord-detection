{"version":3,"sources":["components/WebBluetoothMidi.tsx","components/WebMidi.tsx","libs/ChordDetection.ts","App.tsx","libs/data.ts","serviceWorker.ts","index.tsx"],"names":["server","WebMidi","onMessage","onConnect","onDisconnect","useState","inputs","setInputs","selected","setSelected","connected","setConnected","useEffect","a","navigator","requestMIDIAccess","access","set","values","Array","from","onstatechange","onChange","e","parseInt","currentTarget","value","defaultValue","disabled","map","input","index","key","name","onClick","onmidimessage","data","MIDI_UUID","connect","bluetooth","requestDevice","filters","services","optionalServices","device","gatt","getPrimaryService","service","startMIDIService","console","error","charUUID","getCharacteristic","characteristic","startNotifications","addEventListener","parseMessage","log","buffer","byteLength","getUint8","lastStatus","bufferSize","lPtr","rPtr","Uint8Array","i","WebBluetoothMidi","toggle","disconnect","ChordDetection","notes","this","pressedNotes","sort","b","orgRootNote","chords","getChords","filter","chord","array","indexOf","notesNoRoot","slice","slashedChords","chordExists","some","currentChord","getNoteInversions","reduce","inversion","rootNote","getRootNote","normalizedNotes","normalizeNotes","possibleChords","getPossibleChords","concat","acc","note","normalized","Set","forEach","add","slashedRootNote","chordBitsString","nulls","repeat","padEnd","chordBits","isNaN","rootNoteName","slashedRootNoteName","mask","bits","chordName","chordDetection","App","setChords","setSlashedChords","runDetection","delete","pressedNotesArray","length","run","className","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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iF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,IACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,KACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,KACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,YACNiF,KAAM,KACNC,KAAM,MAGR,CAGElF,KAAM,WACNiF,KAAM,KACNC,KAAM,MAER,CAGElF,KAAM,YACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,WACNiF,KAAM,KACNC,KAAM,MAER,CAGElF,KAAM,OACNiF,KAAM,KACNC,KAAM,MAGR,CAEElF,KAAM,OACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,OACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,QACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,QACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,aACNiF,KAAM,KACNC,KAAM,MAIR,CAEElF,KAAM,IACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,KACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,QACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,KACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,KACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,MACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,MACNiF,KAAM,KACNC,KAAM,MAGR,CAEElF,KAAM,OACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,QACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,YACNiF,KAAM,KACNC,KAAM,MAGR,CAEElF,KAAM,WACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,eACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,eACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,YACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,YACNiF,KAAM,KACNC,KAAM,MAcR,CAEElF,KAAM,IACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,cACNiF,KAAM,KACNC,KAAM,MAGR,CAEElF,KAAM,cACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,WACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,WACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,aACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,MACNiF,KAAM,KACNC,KAAM,MAGR,CAEElF,KAAM,OACNiF,KAAM,KACNC,KAAM,MAER,CAEElF,KAAM,QACNiF,KAAM,KACNC,KAAM,QDtQKG,EAlDH,WAAO,IAAD,EACYjH,mBAAmB,IAD/B,mBACTwE,EADS,KACD0C,EADC,OAE0BlH,mBAAmB,IAF7C,mBAETgF,EAFS,KAEMmC,EAFN,KAIVtH,EAAY,SAACkC,GAID,MAAZA,EAAK,IAAcA,EAAK,GAAK,GAC/BqC,EAAa+B,IAAIpE,EAAK,IACtBqF,EAAahD,KAGM,MAAZrC,EAAK,IAA2B,MAAZA,EAAK,IAA0B,IAAZA,EAAK,MACnDqC,EAAaiD,OAAOtF,EAAK,IACzBqF,EAAahD,KAIXgD,EAAe,SAAChD,GACpB,IAAMkD,EAAoBxG,MAAMC,KAAKqD,GAErC,GAAIkD,EAAkBC,OAAS,EAG7B,OAFAL,EAAU,SACVC,EAAiB,IAInB,IAAM3C,EAASwC,EAAeQ,IAAIF,GAElCJ,EAAU1C,EAAOA,QACjB2C,EAAiB3C,EAAOQ,gBAG1B,OACE,oCACE,yBAAKyC,UAAU,YACb,kBAAC,EAAD,CAAS5H,UAAWA,KAEtB,yBAAK4H,UAAU,YACb,kBAAC,EAAD,CAAkB5H,UAAWA,KAE/B,yBAAK4H,UAAU,oBACb,6BAAMjD,EAAOkD,KAAK,OAClB,6BAAM1C,EAAc0C,KAAK,UE1CbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmB3H,WACrBA,UAAU4H,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACLD,QAAQC,MAAMA,EAAM8F,c","file":"static/js/main.e7cd5f0d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst MIDI_UUID = '03b80e5a-ede8-4b33-a751-6ce34ec4c700';\nconst MIDI_CHARA_UUID = '7772e5db-3868-4112-a1a9-f2669d106bf3';\nlet server: BluetoothRemoteGATTServer | undefined;\n\nconst connect = async (onMessage?: (data: Uint8Array) => void) => {\n  try {\n    const device = await navigator.bluetooth.requestDevice({\n      filters: [{ services: [MIDI_UUID] }],\n      optionalServices: [MIDI_UUID],\n    });\n\n    server = !device.gatt?.connected ? await device.gatt?.connect() : device.gatt;\n    const service = await server?.getPrimaryService(MIDI_UUID);\n\n    if (service) {\n      startMIDIService(service, MIDI_CHARA_UUID, onMessage);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst disconnect = () => {\n  if (server?.connected) {\n    server.disconnect();\n  }\n};\n\nconst startMIDIService = async (\n  service: BluetoothRemoteGATTService,\n  charUUID: string,\n  onMessage?: (data: Uint8Array) => void\n) => {\n  try {\n    const characteristic = await service.getCharacteristic(charUUID);\n    await characteristic.startNotifications();\n    characteristic.addEventListener('characteristicvaluechanged', (e) =>\n      // @ts-ignore\n      parseMessage(e.currentTarget.value, onMessage)\n    );\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// https://learn.sparkfun.com/tutorials/midi-ble-tutorial/all\nconst parseMessage = (data: DataView, onMessage: (data: Uint8Array) => void = console.log) => {\n  // active sensing?\n  if (data.buffer.byteLength === 3 && data.getUint8(2) === 254) {\n    return;\n  }\n\n  const bufferSize = data.buffer.byteLength;\n\n  //Pointers used to search through payload.\n  let lPtr = 2;\n  let rPtr = 0;\n  //lastStatus used to capture runningStatus\n  let lastStatus: number;\n\n  while (1) {\n    lastStatus = data.getUint8(lPtr);\n    if (lastStatus < 0x80) {\n      //Status message not present, bail\n      return;\n    }\n    //Point to next non-data byte\n    rPtr = lPtr;\n    while (rPtr < bufferSize - 1 && data.getUint8(rPtr + 1) < 0x80) {\n      rPtr++;\n    }\n    //look at l and r pointers and decode by size.\n    if (rPtr - lPtr < 1) {\n      //Time code or system\n      onMessage(Uint8Array.from([lastStatus, 0, 0]));\n    } else if (rPtr - lPtr < 2) {\n      onMessage(Uint8Array.from([lastStatus, data.getUint8(lPtr + 1), 0]));\n    } else if (rPtr - lPtr < 3) {\n      onMessage(Uint8Array.from([lastStatus, data.getUint8(lPtr + 1), data.getUint8(lPtr + 2)]));\n    } else {\n      //Too much data\n      //If not System Common or System Real-Time, send it as running status\n      switch (data.getUint8(lPtr) & 0xf0) {\n        case 0x80:\n        case 0x90:\n        case 0xa0:\n        case 0xb0:\n        case 0xe0:\n          for (let i = lPtr; i < rPtr; i = i + 2) {\n            onMessage(Uint8Array.from([lastStatus, data.getUint8(i + 1), data.getUint8(i + 2)]));\n          }\n          break;\n        case 0xc0:\n        case 0xd0:\n          for (let i = lPtr; i < rPtr; i = i + 1) {\n            onMessage(Uint8Array.from([lastStatus, data.getUint8(i + 1), 0]));\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    //Point to next status\n    lPtr = rPtr + 2;\n    if (lPtr >= bufferSize) {\n      //end of packet\n      return;\n    }\n  }\n};\n\nexport const WebBluetoothMidi = ({\n  onMessage,\n  onConnect,\n  onDisconnect,\n}: {\n  onMessage?: (data: Uint8Array) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}) => {\n  const [connected, setConnected] = useState(false);\n\n  const toggle = () => {\n    if (!connected) {\n      if (onConnect) {\n        onConnect();\n      }\n      setConnected(true);\n      connect(onMessage);\n    } else {\n      disconnect();\n      setConnected(false);\n      if (onDisconnect) {\n        onDisconnect();\n      }\n    }\n  };\n\n  return (\n    <>\n      <button onClick={() => toggle()}>\n        {connected ? 'Disconnect Bluetooth MIDI' : 'Connect Bluetooth MIDI'}\n      </button>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nexport const WebMidi = ({\n  onMessage,\n  onConnect,\n  onDisconnect,\n}: {\n  onMessage?: (data: Uint8Array) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}) => {\n  const [inputs, setInputs] = useState<WebMidi.MIDIInput[]>([]);\n  const [selected, setSelected] = useState(0);\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const access = await navigator.requestMIDIAccess();\n      const set = () => {\n        const inputs = access.inputs.values();\n        setInputs(Array.from(inputs));\n      };\n\n      set();\n\n      access.onstatechange = () => {\n        set();\n      };\n    })();\n  }, []);\n\n  const toggle = () => {\n    if (!connected) {\n      if (onConnect) {\n        onConnect();\n      }\n      setConnected(true);\n      if (onMessage) {\n        inputs[selected].onmidimessage = (e) => onMessage(e.data);\n      }\n    } else {\n      inputs[selected].onmidimessage = () => {};\n      setConnected(false);\n      if (onDisconnect) {\n        onDisconnect();\n      }\n    }\n  };\n\n  return (\n    <>\n      <select\n        onChange={(e) => setSelected(parseInt(e.currentTarget.value, 10))}\n        defaultValue={selected}\n        disabled={connected}\n      >\n        {inputs.map((input, index) => (\n          <option key={index} value={index}>\n            {input.name}\n          </option>\n        ))}\n      </select>\n      <button onClick={() => toggle()}>\n        {connected ? 'Disconnect USB MIDI' : 'Connect USB MIDI'}\n      </button>\n    </>\n  );\n};\n","import { Data } from 'libs/data';\n\nclass ChordDetection {\n  private data: Data[];\n  private readonly notes: string[];\n\n  constructor(data: Data[]) {\n    this.data = data;\n    this.notes = ['C', 'D♭', 'D', 'E♭', 'E', 'F', 'G♭', 'G', 'A♭', 'A', 'B♭', 'B'];\n  }\n\n  run(pressedNotes: number[]) {\n    const notes = pressedNotes.sort((a, b) => a - b);\n\n    const orgRootNote = notes[0];\n\n    // chords from all inversions\n    const chords = this.getChords(notes, orgRootNote).filter((chord, index, array) => {\n      return array.indexOf(chord) === index;\n    });\n\n    // chords from all inversions without the root note\n    const notesNoRoot = notes.slice(1);\n    const slashedChords = this.getChords(notesNoRoot, orgRootNote).filter((chord, index, array) => {\n      const isFirst = array.indexOf(chord) === index;\n      if (!isFirst) {\n        return false;\n      }\n      return !this.chordExists(chords, chord);\n    });\n\n    return {\n      chords,\n      slashedChords,\n    };\n  }\n\n  chordExists(chords: string[], chord: string) {\n    return chords.some((currentChord) => currentChord === chord);\n  }\n\n  getChords(notes: number[], orgRootNote: number): string[] {\n    // get inversions and possible chords from each\n    let inversions = this.getNoteInversions(notes);\n    return inversions.reduce<string[]>((chords, inversion) => {\n      const rootNote = this.getRootNote(inversion);\n      const normalizedNotes = this.normalizeNotes(inversion, rootNote);\n      const possibleChords = this.getPossibleChords(normalizedNotes, rootNote, orgRootNote % 12);\n      return chords.concat(possibleChords);\n    }, []);\n  }\n\n  getNoteInversions(notes: number[]) {\n    return notes.reduce<number[][]>((acc, note, index) => {\n      if (index) {\n        return [...acc, [...acc[index - 1].slice(1), acc[index - 1][0]]];\n      }\n      return [notes];\n    }, []);\n  }\n\n  getRootNote(notes: number[]) {\n    return notes[0] % 12;\n  }\n\n  // transpose to C, only 1 octave and remove doubles\n  normalizeNotes(notes: number[], rootNote: number) {\n    const normalized = new Set<number>();\n    notes.forEach((note) => {\n      normalized.add((note - rootNote) % 12);\n    });\n    return Array.from(normalized).sort((a, b) => a - b);\n  }\n\n  getPossibleChords(normalizedNotes: number[], rootNote: number, slashedRootNote?: number) {\n    let chordBitsString = normalizedNotes.reduce((acc, note, index, array) => {\n      if (index === 0) {\n        return '1';\n      }\n      const prevNote = array[index - 1];\n      const nulls = note - prevNote - 1;\n      return `${acc}${'0'.repeat(nulls)}1`;\n    }, '');\n\n    chordBitsString = chordBitsString.padEnd(12, '0');\n\n    const chordBits = parseInt(chordBitsString, 2);\n\n    if (isNaN(chordBits)) {\n      return [];\n    }\n\n    const rootNoteName = this.notes[rootNote];\n    const slashedRootNoteName =\n      typeof slashedRootNote !== 'undefined' ? this.notes[slashedRootNote] : null;\n\n    return this.data.reduce<string[]>((acc, chord) => {\n      if ((chordBits & chord.mask) === chord.bits) {\n        let chordName = `${rootNoteName} ${chord.name}`;\n        if (slashedRootNoteName && slashedRootNoteName !== rootNoteName) {\n          chordName += ` / ${slashedRootNoteName}`;\n        }\n        return acc.concat(chordName);\n      }\n      return acc;\n    }, []);\n  }\n}\n\nexport { ChordDetection };\n","import React, { useState } from 'react';\nimport { WebMidi } from 'components/WebMidi';\nimport { WebBluetoothMidi } from 'components/WebBluetoothMidi';\nimport { ChordDetection } from 'libs/ChordDetection';\nimport { data } from 'libs/data';\nimport 'App.css';\n\nconst pressedNotes = new Set<number>();\nconst chordDetection = new ChordDetection(data);\n\nconst App = () => {\n  const [chords, setChords] = useState<string[]>([]);\n  const [slashedChords, setSlashedChords] = useState<string[]>([]);\n\n  const onMessage = (data: Uint8Array) => {\n    // console.log(data);\n\n    // note on\n    if (data[0] === 144 && data[2] > 0) {\n      pressedNotes.add(data[1]);\n      runDetection(pressedNotes);\n    }\n    // note off\n    else if (data[0] === 128 || (data[0] === 144 && data[2] === 0)) {\n      pressedNotes.delete(data[1]);\n      runDetection(pressedNotes);\n    }\n  };\n\n  const runDetection = (pressedNotes: Set<number>) => {\n    const pressedNotesArray = Array.from(pressedNotes);\n\n    if (pressedNotesArray.length < 2) {\n      setChords([]);\n      setSlashedChords([]);\n      return;\n    }\n\n    const chords = chordDetection.run(pressedNotesArray);\n\n    setChords(chords.chords);\n    setSlashedChords(chords.slashedChords);\n  };\n\n  return (\n    <>\n      <div className=\"controls\">\n        <WebMidi onMessage={onMessage} />\n      </div>\n      <div className=\"controls\">\n        <WebBluetoothMidi onMessage={onMessage} />\n      </div>\n      <div className=\"container-chords\">\n        <div>{chords.join('\\n')}</div>\n        <div>{slashedChords.join('\\n')}</div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","export type Data = {\n  name: string;\n  mask: number;\n  bits: number;\n};\n\n// 1  2  3  4  5  6  7  8  9  10 11 12\n// 1     2  b3 3  4  #4 5  b6 6  b7 7\n// 1  b9 9  #9   11 #11   b13 13\n// 1  1  1  1  1  1  1  1  1  1  1  1\n\n// https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n// https://de.wikipedia.org/wiki/Akkordsymbol\n// https://stackoverflow.com/questions/25455558/bitfield-mask-operations-with-optional-items\nexport const data: Data[] = [\n  // Major\n  {\n    // 1 3 5\n    name: '',\n    mask: 0b111111111111,\n    bits: 0b100010010000,\n  },\n  {\n    // 1 3 (5) 7\n    name: 'maj7',\n    mask: 0b111111101111,\n    bits: 0b100010000001,\n  },\n  {\n    // 1 3 (5) 7 9\n    name: 'maj9',\n    mask: 0b111111101111,\n    bits: 0b101010000001,\n  },\n  {\n    // 1 3 (5) 7 (9) 11\n    name: 'maj11',\n    mask: 0b110111101111,\n    bits: 0b100011000001,\n  },\n  {\n    // 1 3 (5) 7 (9) (11) 13\n    name: 'maj13',\n    mask: 0b110110101111,\n    bits: 0b100010000101,\n  },\n  {\n    // 1 3 (5) 6\n    name: '6',\n    mask: 0b111111101111,\n    bits: 0b100010000100,\n  },\n  {\n    // 1 3 (5) 6 9\n    name: '6/9',\n    mask: 0b111111101111,\n    bits: 0b101010000100,\n  },\n  {\n    // 1 3 ♯4 (5) (7) (9) (13)\n    name: 'maj♯11',\n    mask: 0b110111101010,\n    bits: 0b100010100000,\n  },\n  {\n    // TODO: is 7 optional or not?\n    // 1 3 (5) ♭6 (7) (9) (11)\n    name: 'maj7♭6',\n    mask: 0b110110101110,\n    bits: 0b100010001000,\n  },\n  // Dominant/Seventh\n  // Normal\n  {\n    // 1 3 (5) ♭7\n    name: '7',\n    mask: 0b111111101111,\n    bits: 0b100010000010,\n  },\n  {\n    // 1 3 (5) ♭7 9\n    name: '9',\n    mask: 0b111111101111,\n    bits: 0b101010000010,\n  },\n  {\n    // 1 3 (5) ♭7 (9) 11\n    name: '11',\n    mask: 0b110111101111,\n    bits: 0b100011000010,\n  },\n  {\n    // 1 3 (5) ♭7 (9) (11) 13\n    name: '13',\n    mask: 0b110110101111,\n    bits: 0b100010000110,\n  },\n  {\n    // 1 3 (5) ♭7 (9) ♯11 (13)\n    name: '7♯11',\n    mask: 0b110111101011,\n    bits: 0b100010100010,\n  },\n  // Altered\n  {\n    // TODO: other optional notes (?)\n    // 1 3 (♭5) (5) ♭7 ♭9 (♯9)\n    name: '7♭9',\n    mask: 0b111011001111,\n    bits: 0b110010000010,\n  },\n  {\n    // TODO: other optional notes (?)\n    // 1 3 (♭5) (5) ♭7 ♭9 (♯9) 13\n    name: '13♭9',\n    mask: 0b111011001111,\n    bits: 0b110010000110,\n  },\n  {\n    // 1 3 (5) ♭7 ♯9\n    name: '7♯9',\n    mask: 0b111111101111,\n    bits: 0b100110000010,\n  },\n  {\n    // TODO: other optional notes (?)\n    // 1 3 (♭5) (♭6) ♭7 (♭9) (♯9)\n    name: 'alt7',\n    mask: 0b101011010111,\n    bits: 0b100010000010,\n  },\n  // Suspended\n  {\n    // 1 4 (5)\n    name: 'sus4',\n    mask: 0b111111101111,\n    bits: 0b100001000000,\n  },\n  {\n    // 1 2 (5)\n    name: 'sus2',\n    mask: 0b111111101111,\n    bits: 0b101000000000,\n  },\n  {\n    // 1 4 (5) ♭7\n    name: '7sus4',\n    mask: 0b111111101111,\n    bits: 0b100001000010,\n  },\n  {\n    // 1 4 (5) ♭7 9\n    name: '9sus4',\n    mask: 0b111111101111,\n    bits: 0b101001000010,\n  },\n  {\n    // 1 4 (5) ♭9\n    name: '♭9sus',\n    mask: 0b111111101111,\n    bits: 0b110001000000,\n  },\n  // Minor\n  // Normal\n  {\n    // 1 ♭3 5\n    name: '-',\n    mask: 0b111111111111,\n    bits: 0b100100010000,\n  },\n  {\n    // 1 ♭3 (5) ♭7\n    name: '-7',\n    mask: 0b111111101111,\n    bits: 0b100100000010,\n  },\n  {\n    // 1 ♭3 (5) 7 (9) (♭13) (13)\n    name: '-maj7',\n    mask: 0b110111100011,\n    bits: 0b100100000001,\n  },\n  {\n    // 1 ♭3 (5) 6\n    name: '-6',\n    mask: 0b111111101111,\n    bits: 0b100100000100,\n  },\n  {\n    // 1 ♭3 (5) ♭7 9\n    name: '-9',\n    mask: 0b111111101111,\n    bits: 0b101100000010,\n  },\n  {\n    // 1 ♭3 (5) ♭7 (9) 11\n    name: '-11',\n    mask: 0b110111101111,\n    bits: 0b100101000010,\n  },\n  {\n    // 1 ♭3 (5) ♭7 (9) (11) 13\n    name: '-13',\n    mask: 0b110110101111,\n    bits: 0b100100000110,\n  },\n  // Diminished\n  {\n    // 1 ♭3 ♭5\n    name: '°',\n    mask: 0b111111111111,\n    bits: 0b100100100000,\n  },\n  {\n    // 1 ♭3 ♭5 ♭♭7\n    name: '°7',\n    mask: 0b111111111111,\n    bits: 0b100100100100,\n  },\n  {\n    // 1 ♭3 ♭5 ♭7 (♭9) (9) (11) (13)\n    name: '-7♭5',\n    mask: 0b100110111011,\n    bits: 0b100100100010,\n  },\n  // Other\n  {\n    // 1 5\n    name: '(no 3rd)',\n    mask: 0b111111111111,\n    bits: 0b100000010000,\n  },\n  {\n    // 1 5 7\n    name: '(no 3rd)maj7',\n    mask: 0b111111111111,\n    bits: 0b100000010001,\n  },\n  {\n    // 1 5 7 9\n    name: '(no 3rd)maj9',\n    mask: 0b111111111111,\n    bits: 0b101000010001,\n  },\n  {\n    // 1 5 ♭7\n    name: '(no 3rd)7',\n    mask: 0b111111111111,\n    bits: 0b100000010010,\n  },\n  {\n    // 1 5 ♭7 9\n    name: '(no 3rd)9',\n    mask: 0b111111111111,\n    bits: 0b101000010010,\n  },\n  // {\n  //   // 1 3\n  //   name: '(no 5th)',\n  //   mask: 0b111111111111,\n  //   bits: 0b100010000000,\n  // },\n  // {\n  //   // 1 ♭3\n  //   name: '-(no 5th)',\n  //   mask: 0b111111111111,\n  //   bits: 0b100100000000,\n  // },\n  {\n    // 1 3 ♯5\n    name: '+',\n    mask: 0b111111111111,\n    bits: 0b100010001000,\n  },\n  {\n    // 1 3 ♯5 7\n    name: 'maj7♯5',\n    mask: 0b111111111111,\n    bits: 0b100010001001,\n  },\n  // Alterations\n  {\n    // 1 3 (5) 7 9 ♯11\n    name: 'maj7♯4',\n    mask: 0b111111101111,\n    bits: 0b101010100001,\n  },\n  {\n    // 1 3 ♯5 ♭7\n    name: '7♯5',\n    mask: 0b111111111111,\n    bits: 0b100010001010,\n  },\n  {\n    // 1 3 (5) ♭7 ♯9\n    name: '7♯9',\n    mask: 0b111111101111,\n    bits: 0b100110000010,\n  },\n  {\n    // 1 4 (5) ♭7 ♭9\n    name: '♭9sus',\n    mask: 0b111111101111,\n    bits: 0b110001000010,\n  },\n  {\n    // 1 3 (5) ♭7 ♭9 ♯9 ♯11 b13\n    name: 'alt',\n    mask: 0b111111101111,\n    bits: 0b110110101010,\n  },\n  // Additions\n  {\n    // 1 3 (5) 9\n    name: 'add9',\n    mask: 0b111111101111,\n    bits: 0b101010000000,\n  },\n  {\n    // 1 ♭3 (5) 9\n    name: '-add9',\n    mask: 0b111111101111,\n    bits: 0b101100000000,\n  },\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}